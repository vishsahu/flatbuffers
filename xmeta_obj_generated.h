// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_XMETAOBJ_H_
#define FLATBUFFERS_GENERATED_XMETAOBJ_H_

#include "flatbuffers/flatbuffers.h"

struct user_attr;

struct sparse_entry;

struct xmeta_format;

/// This schema defines the format of meta-data packing in extra meta object.
struct user_attr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_VALUE = 6
  };
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  const flatbuffers::String *value() const {
    return GetPointer<const flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct user_attrBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(user_attr::VT_KEY, key);
  }
  void add_value(flatbuffers::Offset<flatbuffers::String> value) {
    fbb_.AddOffset(user_attr::VT_VALUE, value);
  }
  explicit user_attrBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  user_attrBuilder &operator=(const user_attrBuilder &);
  flatbuffers::Offset<user_attr> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<user_attr>(end);
    return o;
  }
};

inline flatbuffers::Offset<user_attr> Createuser_attr(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    flatbuffers::Offset<flatbuffers::String> value = 0) {
  user_attrBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<user_attr> Createuser_attrDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const char *value = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return Createuser_attr(
      _fbb,
      key__,
      value__);
}

struct sparse_entry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OFFSET = 4,
    VT_LENGTH = 6
  };
  uint64_t offset() const {
    return GetField<uint64_t>(VT_OFFSET, 0);
  }
  uint64_t length() const {
    return GetField<uint64_t>(VT_LENGTH, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_OFFSET) &&
           VerifyField<uint64_t>(verifier, VT_LENGTH) &&
           verifier.EndTable();
  }
};

struct sparse_entryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_offset(uint64_t offset) {
    fbb_.AddElement<uint64_t>(sparse_entry::VT_OFFSET, offset, 0);
  }
  void add_length(uint64_t length) {
    fbb_.AddElement<uint64_t>(sparse_entry::VT_LENGTH, length, 0);
  }
  explicit sparse_entryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  sparse_entryBuilder &operator=(const sparse_entryBuilder &);
  flatbuffers::Offset<sparse_entry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<sparse_entry>(end);
    return o;
  }
};

inline flatbuffers::Offset<sparse_entry> Createsparse_entry(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t offset = 0,
    uint64_t length = 0) {
  sparse_entryBuilder builder_(_fbb);
  builder_.add_length(length);
  builder_.add_offset(offset);
  return builder_.Finish();
}

struct xmeta_format FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACL = 4,
    VT_USER_ATTRS = 6,
    VT_SPARSE_MAP = 8
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *acl() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_ACL);
  }
  const flatbuffers::Vector<flatbuffers::Offset<user_attr>> *user_attrs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<user_attr>> *>(VT_USER_ATTRS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<sparse_entry>> *sparse_map() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<sparse_entry>> *>(VT_SPARSE_MAP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACL) &&
           verifier.VerifyVector(acl()) &&
           verifier.VerifyVectorOfStrings(acl()) &&
           VerifyOffset(verifier, VT_USER_ATTRS) &&
           verifier.VerifyVector(user_attrs()) &&
           verifier.VerifyVectorOfTables(user_attrs()) &&
           VerifyOffset(verifier, VT_SPARSE_MAP) &&
           verifier.VerifyVector(sparse_map()) &&
           verifier.VerifyVectorOfTables(sparse_map()) &&
           verifier.EndTable();
  }
};

struct xmeta_formatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_acl(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> acl) {
    fbb_.AddOffset(xmeta_format::VT_ACL, acl);
  }
  void add_user_attrs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<user_attr>>> user_attrs) {
    fbb_.AddOffset(xmeta_format::VT_USER_ATTRS, user_attrs);
  }
  void add_sparse_map(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<sparse_entry>>> sparse_map) {
    fbb_.AddOffset(xmeta_format::VT_SPARSE_MAP, sparse_map);
  }
  explicit xmeta_formatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  xmeta_formatBuilder &operator=(const xmeta_formatBuilder &);
  flatbuffers::Offset<xmeta_format> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<xmeta_format>(end);
    return o;
  }
};

inline flatbuffers::Offset<xmeta_format> Createxmeta_format(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> acl = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<user_attr>>> user_attrs = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<sparse_entry>>> sparse_map = 0) {
  xmeta_formatBuilder builder_(_fbb);
  builder_.add_sparse_map(sparse_map);
  builder_.add_user_attrs(user_attrs);
  builder_.add_acl(acl);
  return builder_.Finish();
}

inline flatbuffers::Offset<xmeta_format> Createxmeta_formatDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *acl = nullptr,
    const std::vector<flatbuffers::Offset<user_attr>> *user_attrs = nullptr,
    const std::vector<flatbuffers::Offset<sparse_entry>> *sparse_map = nullptr) {
  auto acl__ = acl ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*acl) : 0;
  auto user_attrs__ = user_attrs ? _fbb.CreateVector<flatbuffers::Offset<user_attr>>(*user_attrs) : 0;
  auto sparse_map__ = sparse_map ? _fbb.CreateVector<flatbuffers::Offset<sparse_entry>>(*sparse_map) : 0;
  return Createxmeta_format(
      _fbb,
      acl__,
      user_attrs__,
      sparse_map__);
}

inline const xmeta_format *Getxmeta_format(const void *buf) {
  return flatbuffers::GetRoot<xmeta_format>(buf);
}

inline const xmeta_format *GetSizePrefixedxmeta_format(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<xmeta_format>(buf);
}

inline bool Verifyxmeta_formatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<xmeta_format>(nullptr);
}

inline bool VerifySizePrefixedxmeta_formatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<xmeta_format>(nullptr);
}

inline const char *xmeta_formatExtension() {
  return "h";
}

inline void Finishxmeta_formatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<xmeta_format> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedxmeta_formatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<xmeta_format> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_XMETAOBJ_H_
